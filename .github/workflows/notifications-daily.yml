name: Notification Testing (Every Minute)

on:
  schedule:
    # TESTING: Run every minute for testing purposes
    # TODO: Change back to daily after testing: '0 9 * * *'
    - cron: '* * * * *'

  # Allow manual trigger from GitHub Actions tab
  workflow_dispatch:

jobs:
  notification-batch:
    runs-on: ubuntu-latest
    name: Test notification system (runs every minute)

    steps:
      - name: üîî Daily Notification System
        run: |
          echo "üïò Starting daily notifications at $(date)"
          echo "üì± Running subscription expiry, inactive user, and new content notifications"

          # Check for new video content in the last 24 hours and send notifications
          echo "üìπ Checking for new video content published in last 24 hours..."
          new_content_response=$(curl -s -w "\n%{http_code}" -X POST \
            "${{ secrets.SUPABASE_URL }}/functions/v1/notification-triggers" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "apikey: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json" \
            -H "x-client-info: github-cron-daily" \
            -d '{
              "type": "daily_content_check",
              "data": {
                "check_hours": 24,
                "content_types": ["video_kitab", "video_episodes", "ebooks"]
              },
              "target_roles": ["student"]
            }')

          # Test subscription expiry notifications
          echo "‚è∞ Checking subscription expiry notifications..."
          expiry_response=$(curl -s -w "\n%{http_code}" -X POST \
            "${{ secrets.SUPABASE_URL }}/rest/v1/rpc/trigger_subscription_expiry_check" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "apikey: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json")

          # Test inactive user notifications
          echo "üë• Checking inactive user notifications..."
          inactive_response=$(curl -s -w "\n%{http_code}" -X POST \
            "${{ secrets.SUPABASE_URL }}/rest/v1/rpc/trigger_inactive_user_notification" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "apikey: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json")

          # Test general notification endpoint
          echo "üß™ Testing notification-triggers function..."
          response=$(curl -s -w "\n%{http_code}" -X POST \
            "${{ secrets.SUPABASE_URL }}/functions/v1/notification-triggers" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "apikey: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json" \
            -H "x-client-info: github-actions" \
            -d '{
              "type": "admin_announcement",
              "data": {
                "title": "Test Notification from GitHub",
                "message": "This is an automated test notification from GitHub Actions cron job",
                "priority": "low"
              },
              "target_roles": ["admin"]
            }')

          # Extract HTTP status code (last line)
          http_code=$(echo "$response" | tail -n1)

          # Extract response body (all lines except last)
          response_body=$(echo "$response" | head -n -1)

          echo "üìä Response Code: $http_code"
          echo "üìÑ Response Body: $response_body"

          # Check if request was successful
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ Notification test completed successfully!"
            echo "Response: $response_body"
          else
            echo "‚ùå Notification test failed with code: $http_code"
            echo "Error details: $response_body"
          fi

          echo "üèÅ Notification test completed at $(date)"

      - name: üìä Test Summary
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Notification system test completed successfully"
            echo "üì± Check Supabase database for new test notifications"
            echo "üîÑ Next test will run in 1 minute"
            echo "‚ö†Ô∏è REMEMBER: Change cron back to daily after testing!"
          else
            echo "‚ùå Notification test failed - check logs above"
            echo "‚ö†Ô∏è Admin should review the error and fix any issues"
          fi

      - name: üßπ Test Status
        if: success()
        run: |
          echo "üß™ This is TESTING MODE - running every minute"
          echo "üìß Check Supabase Edge Function logs for detailed insights"
          echo "üìã Monitor user_notifications table for new entries"
          echo "‚ö†Ô∏è TODO: Change cron schedule back to daily after testing"